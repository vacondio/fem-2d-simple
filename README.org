* What needs to be done
** DONE Build meshes
** TODO Stiffness matrix
** TODO RHS of the linear system (constants vector)
** TODO Algorithm to refine the mesh
** TODO Write an example

* Some notes to carry out the project

- [[https://en.wikipedia.org/wiki/Stiffness_matrix][Stiffness Matrix]]: here is the definition of the local stiffness matrix that we
  can borrow for a (relatively) quick implementation

- [[https://scipy.github.io/old-wiki/pages/SciPyPackages/Sparse.html][Composing sparse matrices with SciPy]]: dedicated routines for creating sparse
  matrices, in particular ~scipy.sparse.coo_matrix~ appears to be what we need.
  Conversions are possible between sparse formats (e.g. ~csc_matrix~ or
  ~csr_matrix~) or the dense ordinary ~numpy.array~.  It is important to convert
  to one of these formats in order to feed the matrix to the selected linear
  system solver (see later).

- [[https://docs.scipy.org/doc/scipy/reference/sparse.linalg.html][Solving sparse linear systems]]: ~scipy.linalg.spsolve~ could be a candidate for
  solving the linear system. Apparently, if the resulting vector is dense, one
  may consider using the ordinary [[https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve.html][~scipy.linalg.solve~]].  I propose to proceed as
  follows:
  + First we solve using ~spsolve~: in this case we try feeding the solver
    either a dense numpy.array matrix or a ~csc_matrix~ / ~csr_matrix~, depending
    which is the easiest to obtain from the ~coo_matrix~.
  + Then we try ~linalg.solve~ with a dense numpy.array matrix.
  + We check which is fastest.

- [[https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions][List comprehensions]]: useful to generate those meshes, but ~numpy.linspace~ is
  even better.

* Generating the local stiffness matrix

Let us name the coordinates of the vertices of the an element:

#+BEGIN_EXAMPLE
.
.       (x0,y0) _____ (x1,y1)
.               |   /|
.               |  / |
.               | /  |
.       (x2,y2) |/___|
.
#+END_EXAMPLE

Now let us use the appropriate formula to compute the local stiffness:

#+BEGIN_EXAMPLE
D =  [ x2-x1, x0-x2, x1-x0 ] = [ -dx,   0, dx ]
     [ y2-y1, y0-y2, y1-y0 ]   [  dy, -dy,  0 ]
#+END_EXAMPLE
# \begin{equation}
# \mathbf D = 
# \begin{bmatrix}
# x_2-x_1 & x_0-x_2 & x_1-x_0 \\
# y_2-y_1 & y_0-y_2 & y_1-y_0
# \end{bmatrix} =
# \begin{bmatrix}
# -\mathrm dx & 0           & \mathrm dx \\
#  \mathrm dy & -\mathrm dy & 0
# \end{bmatrix}
# \end{equation}

Finally we compute the local stiffness with:

# \begin{equation}
# \mathbf A = \frac{\mathbf D^T \mathbf D}{4 ~ \mathrm{area}(T)}
# \end{equation}

#+BEGIN_EXAMPLE
       D.T x D
A = --------------
     4*elem_area
#+END_EXAMPLE

